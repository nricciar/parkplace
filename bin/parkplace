#!/usr/bin/env ruby
$:.unshift "./lib"
require 'parkplace'
require 'optparse'

options = ParkPlace::Base.options
# secret key for sessions
options.secret = "9e107d9d372bb6826bd81d3542a419d6"
options.host = "127.0.0.1"
options.port = 3002
options.pid_file = "parkplace.pid"

# Need access to @handlers from Rack::Handler
module Rack::Handler; def self.handlers; @handlers.invert; end; end

opts = OptionParser.new do |opts|
    opts.banner = "Usage: parkplace [options] [host] [port]"
    opts.separator "Default host is #{options.host}, default port is #{options.port}."

    opts.separator ""
    opts.separator "Common options:"

    opts.on("-s", "--server SERVER", "serve using SERVER (defaults to '#{Rack::Handler.handlers[ParkPlace::Base.server.to_s]}')") do |s|
        options.server = s
    end

    opts.on("--rackup FILE", "specify rack config location (defaults to 'config.ru')") do |ru|
        options.rack_config = ru
    end

    opts.on("-m", "--memcache SERVER", "response cache") do |m|
        CACHE.servers = m
    end

    opts.on("-d", "--directory DIRECTORY",
            "Park Place directory (defaults to #{options.parkplace_dir || 'None'})") do |d|
        options.parkplace_dir = d
    end

    opts.on("--[no-]x-sendfile", "X-Sendfile support (default enabled)") do |ns|
        options.use_x_sendfile = ns
    end

    opts.on("-D", "--daemonize",  "run daemonized in the background") do |d|
        options.daemon = true
    end

    opts.on("-P", "--pid FILE", "file to store PID (default: #{options.pid_file})") do |f|
        options.pid_file = f
    end

    opts.on("-v", "--verbose", "Run verbosely") do |v|
        options.verbose = v
    end

    opts.on("-u", "--debug", "Debug Mode") do |v|
        begin
          require 'ruby-debug'
          Debugger.start
        rescue LoadError
        end
        $DEBUG = v
    end

    opts.separator ""
    opts.separator "Slave replication options:"

    opts.on("-r", "--replicate HOSTNAME", "Mirror master server") do |s|
        options.replication = { }
        options.replication[:enabled] = true unless s.nil?
        options.replication[:host] = s
    end

    opts.on("--replicate-secret KEY", "secret key for replication") do |s|
        options.replication ||= { }
        options.replication[:secret_access_key] ||= s
    end

    opts.on("--replicate-user USERNAME", "for authentication (defaults to 'admin')") do |k|
        options.replication ||= { }
        options.replication[:username] ||= k
    end

    opts.separator ""
    opts.separator "Specific options:"

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    # Another typical switch to print the version.
    opts.on_tail("--version", "Show version") do
      puts ParkPlace::VERSION
      exit
    end
end

opts.parse! ARGV
options.host = ARGV[0] if ARGV[0]
options.port = ARGV[1].to_i if ARGV[1]

ParkPlace::Base.options = options
ParkPlace::Base.serve(options.host,options.port)
